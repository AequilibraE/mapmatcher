name: Unit Test

on:
  pull_request:
  release:
  push:
    branches:
      - main

jobs:

  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: x64

      - name: Install dependencies
        run: |
          pip install -e .[testing]

      - name: Linting
        run: |
          ruff --version
          black --version
          ruff check .
          black --check .

  unit_tests:
    needs: linting
    runs-on: ${{ matrix.os}}
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12' ]
        os: [ windows-latest, ubuntu-latest ]
      max-parallel: 20
    steps:
    - uses: actions/checkout@v4
    - name: Set Python environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing]

    - name: Download spatialite on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install libspatialite-dev 
        sudo apt install -y libsqlite3-mod-spatialite
        pip3 install spatialite
        sudo ln -s /usr/lib/x86_64-linux-gnu/mod_spatialite.so /usr/lib/x86_64-linux-gnu/mod_spatialite

    - name: Download spatialite on Windows
      if: matrix.os == 'windows-latest'
      run:  python tests/setup_windows_spatialite.py

    - name: Runs unit tests
      run: |
        python -m pytest -v
